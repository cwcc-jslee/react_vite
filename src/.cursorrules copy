# 프로젝트 관리 시스템 개발 가이드

## 기술 스택

- React 18.2
- Node.js v20.18.1
- Vite 6.0.7 (Web Server)
- Strapi 5.4 (API Server)
- TailwindCSS (스타일링)
- Redux Toolkit (상태관리)
- JavaScript (TypeScript 사용 안함)

## 코딩 규칙

### 1. 파일 헤더 필수

모든 JavaScript/JSX 파일 상단에 반드시 포함:

```javascript
/**
 * 파일 경로: src/features/project/components/ProjectCard.jsx
 * 설명: 프로젝트 카드 컴포넌트 - 프로젝트 목록 표시
 * 기능: 프로젝트 정보 표시, 상세보기 링크, 상태 표시
 */
```

### 2. 함수명 규칙

- **2단계 (기본)**: 동사 + 대상
    - `createProject`, `updateUser`, `deleteTask`, `fetchData`
- **3단계 (세부 구분 필요시)**: 동사 + 대상 + 행위/상태
    - `createProjectModal`, `updateUserStatus`, `deleteTaskConfirm`

### 3. 컴포넌트 구조 템플릿

```javascript
/**
 * 파일 경로: [실제 경로]
 * 설명: [컴포넌트 설명]
 * 기능: [주요 기능]
 */
import React from 'react';
import { useSelector, useDispatch } from 'react-redux';

const ComponentName = ({ prop1, prop2, ...props }) => {
  // 상태 및 훅
  const dispatch = useDispatch();
  const state = useSelector(state => state.feature);
  
  // 이벤트 핸들러
  const handleAction = () => {
    // 로직
  };
  
  // 렌더링
  return (
    <div className="p-4 bg-white rounded-lg shadow-md">
      {/* 컴포넌트 내용 */}
    </div>
  );
};

export default ComponentName;
```

## 디렉토리 구조

### Features 구조

```
src/features/
├── sfa/           # 영업 관리
├── project/       # 프로젝트 관리  
├── todo/          # 할일 관리
├── customer/      # 고객 관리
└── contact/       # 연락처 관리

각 feature 하위 구조:
├── api/           # API 호출 함수
├── components/    # 컴포넌트
├── constants/     # 상수
├── containers/    # 컨테이너 컴포넌트
├── context/       # Context API
├── hooks/         # 커스텀 훅
├── layouts/       # 레이아웃
├── sections/      # 섹션 컴포넌트
├── pages/         # 페이지 컴포넌트
├── services/      # 서비스 로직
└── utils/         # 유틸리티
```

### Shared 구조

```
src/shared/
├── components/ui/ # 공통 UI 컴포넌트
├── hooks/         # 공통 훅 (useUiStore.js)
├── store/         # Redux 스토어
│   ├── index.js
│   └── slices/
│       ├── uiSlice.js
│       ├── projectSlice.js
│       └── todoSlice.js
├── utils/
├── constants/
└── services/
```

## 상태 관리

### Redux Store 설정

```javascript
/**
 * 파일 경로: src/shared/store/index.js
 * 설명: Redux 스토어 설정
 */
import { configureStore } from '@reduxjs/toolkit';
import authReducer from '../features/auth/store/authSlice';
import codebookReducer from './slices/codebookSlice';
import uiSlice from './slices/uiSlice';
import projectSlice from './slices/projectSlice';
import todoReducer from './slices/todoSlice';

export const store = configureStore({
  reducer: {
    auth: authReducer,
    codebook: codebookReducer,
    ui: uiSlice,
    project: projectSlice,
    todo: todoReducer,
  },
});
```

### 커스텀 훅 패턴


## 스타일링 (TailwindCSS)

### 기본 원칙

- CSS 파일 생성 금지, TailwindCSS만 사용
- 반응형: `sm:`, `md:`, `lg:`, `xl:` 활용
- 일관된 spacing: `p-4`, `m-2`, `gap-4`
- 재사용 가능한 클래스 조합

### 컴포넌트 예시

```javascript
const Button = ({ children, variant = 'primary', size = 'md' }) => {
  const baseClasses = 'font-medium rounded-lg transition-colors';
  const variants = {
    primary: 'bg-blue-600 hover:bg-blue-700 text-white',
    secondary: 'bg-gray-200 hover:bg-gray-300 text-gray-900',
  };
  const sizes = {
    sm: 'px-3 py-1.5 text-sm',
    md: 'px-4 py-2',
    lg: 'px-6 py-3 text-lg',
  };
  
  return (
    <button className={`${baseClasses} ${variants[variant]} ${sizes[size]}`}>
      {children}
    </button>
  );
};
```

## API 통신 (Strapi 5.4)

### API 함수 패턴



## 파일 명명 규칙

### 파일명

- **컴포넌트**: `ProjectCard.jsx`, `UserProfile.jsx`
- **페이지**: `ProjectListPage.jsx`, `UserDetailPage.jsx`
- **훅**: `useProjectStore.js`, `useUserData.js`
- **서비스**: `projectApiService.js`, `projectSubmitService.js`
- 

### 폴더명

- **features**: 소문자 (`sfa`, `project`, `work`)
- **하위 폴더**: 소문자 (`components`, `hooks`, `services`)

## 주요 페이지 구성

### 1. SFA (Sales Force Automation)

- 매출 대시보드
- 영업 기회 관리
- 고객 관계 관리
- 매출 분석 리포트

### 2. Project (프로젝트 관리)

- 프로젝트 목록/상세
- 프로젝트 생성/수정/삭제
- 진행률 추적
- 팀원 관리

### 3. Todo (할일일 관리)

- 태스크 목록/상세
- 업무 할당/관리
- 진행 상황 모니터링
- 업무 통계

### 4. Customer (고객 관리)

- 고객 정보 CRUD
- 고객 히스토리
- 커뮤니케이션 로그
- 고객 분석

## 개발 체크리스트

### 파일 생성시

- 파일 헤더 주석 추가
- 적절한 디렉토리 위치
- 명명 규칙 준수
- import 순서 정리

### 컴포넌트 개발시

- 함수형 컴포넌트 사용
- Props destructuring
- TailwindCSS 스타일링
- 에러 처리 구현

### 상태 관리시

- Redux Toolkit 사용
- 커스텀 훅으로 접근
- 액션/상태 분리

### API 통신시

- 에러 처리 포함
- async/await 사용
- 환경변수 활용
- 로딩 상태 관리

이 가이드를 따라 일관성 있는 코드를 작성해주세요.