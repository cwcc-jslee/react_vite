---
description: 
globs: 
alwaysApply: false
---
# 상태 관리 가이드라인

## 상태 관리 구조
1. 모든 상태 관리 로직은 `store/` 디렉토리에 위치
2. 기능별로 모듈화된 상태 관리 구조 사용

## 상태 관리 규칙
1. 전역 상태는 Redux 사용
2. 컴포넌트 내부 상태는 React useState 사용
3. 복잡한 상태 로직은 커스텀 훅으로 분리
4. 비동기 작업은 Redux Thunk 사용

## Redux 스토어 구조
```
src/shared/store/
  ├── index.js          # 스토어 설정
  └── slices/           # 기능별 모듈
      ├── uiSlice.js            # 전역 UI 상태 관리 슬라이스
      ├── codebookSlic.js       # 코드북 데이터 관리
      ├── projectSlice.js       # 프로젝트 데이터 상태 관리 슬라이스
      ├── todoSlice.js          # Todo 페이지 데이터 관리
      └── ...
```

## 스토어 설정
```javascript
/**
 * 파일 경로: src/shared/store/index.js
 * 설명: Redux 스토어 설정
 */
import { configureStore } from '@reduxjs/toolkit';
import authReducer from '../features/auth/store/authSlice';
import codebookReducer from './slices/codebookSlice';
import uiSlice from './slices/uiSlice';
import projectSlice from './slices/projectSlice';
import todoReducer from './slices/todoSlice';

export const store = configureStore({
  reducer: {
    auth: authReducer,
    codebook: codebookReducer,
    ui: uiSlice,
    project: projectSlice,
    todo: todoReducer,
  },
});
```

## 상태 관리 모범 사례
1. 불필요한 전역 상태 사용 지양
2. 상태 업데이트는 리듀서에서만 수행
3. 비동기 작업은 액션 크리에이터에서 처리
4. 상태 선택은 셀렉터 함수 사용

## 예시
```javascript
// store/features/auth/authSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

export const login = createAsyncThunk(
  'auth/login',
  async (credentials) => {
    const response = await api.login(credentials);
    return response.data;
  }
);

const authSlice = createSlice({
  name: 'auth',
  initialState: {
    user: null,
    loading: false,
    error: null
  },
  reducers: {
    logout: (state) => {
      state.user = null;
    }
  },
  extraReducers: (builder) => {
    builder
      .addCase(login.pending, (state) => {
        state.loading = true;
      })
      .addCase(login.fulfilled, (state, action) => {
        state.loading = false;
        state.user = action.payload;
      })
      .addCase(login.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      });
  }
});

export const { logout } = authSlice.actions;
export default authSlice.reducer;
```

