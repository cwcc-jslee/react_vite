---
description: 
globs: 
alwaysApply: false
---
# 컴포넌트 작성 가이드라인

## 컴포넌트 구조
1. 각 컴포넌트는 자체 디렉토리에 위치
2. 컴포넌트 파일 구조:


## 네이밍 규칙
1. 컴포넌트 이름은 PascalCase 사용
2. 파일 이름은 컴포넌트 이름과 동일하게 작성
3. 테스트 파일은 `.test.js` 확장자 사용

## 컴포넌트 작성 규칙
1. 함수형 컴포넌트 사용
2. Props 타입 정의 필수
3. 컴포넌트 내부 로직은 최소화
4. 재사용 가능한 로직은 커스텀 훅으로 분리
5. 상태 관리는 store 디렉토리에서 처리

## 함수명 작성 규칙
- 2단계 (기본): 동사 + 대상
    - `createProject`, `updateUser`, `deleteTask`, `fetchData`
- 3단계 (세부 구분 필요시): 동사 + 대상 + 행위/상태
    - `createProjectModal`, `updateUserStatus`, `deleteTaskConfirm`

## React 아이콘 라이브러리
 - Lucide React

## 스타일링 규칙
1. Tailwind CSS 사용
2. 컴포넌트별 스타일은 CSS 모듈 사용
3. 전역 스타일은 `src/index.css`에서 관리


## 예시
```jsx
// Button.jsx
import React from 'react';
import PropTypes from 'prop-types';
import styles from './Button.module.css';

const Button = ({ children, onClick, variant = 'primary' }) => {
  return (
    <button 
      className={`${styles.button} ${styles[variant]}`}
      onClick={onClick}
    >
      {children}
    </button>
  );
};

Button.propTypes = {
  children: PropTypes.node.isRequired,
  onClick: PropTypes.func,
  variant: PropTypes.oneOf(['primary', 'secondary', 'outline'])
};

export default Button;
```

